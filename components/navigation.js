"use client";

import { MdOutlineQueryStats } from "react-icons/md";
import Image from "next/image";
import { useContext, useEffect, useState } from "react";
import { authContext } from "@/lib/store/auth-context";
import { useCurrency } from "@/lib/store/CurrencyContext"; // Import the currency context
import { currencies } from "@/lib/store/currencies"; // Import the currencies
import { db } from "@/lib/firebase"; // Import Firestore
import { collection, query, where, getDocs } from "firebase/firestore"; // Import Firestore functions
import jsPDF from "jspdf"; // Import jsPDF
import { toast } from "react-toastify";

function Nav() {
  const { user, loading, logout } = useContext(authContext);
  const { currency, setCurrency } = useCurrency(); // Use the currency context
  const [hasData, setHasData] = useState(false); // State to track if user has data
  const [incomeData, setIncomeData] = useState([]);
  const [expenseData, setExpenseData] = useState([]);

  const handleCurrencyChange = (event) => {
    setCurrency(event.target.value); // Update the selected currency
  };

  const getFirstName = (displayName) => {
    if (!displayName) return "";
    return displayName.split(" ")[0];
  };

  // Function to check if the user has income or expense data
  const checkUserData = async () => {
    if (user) {
      const incomeRef = collection(db, "income");
      const expenseRef = collection(db, "expenses");

      const incomeQuery = query(incomeRef, where("uid", "==", user.uid));
      const expenseQuery = query(expenseRef, where("uid", "==", user.uid));

      const incomeSnapshot = await getDocs(incomeQuery);
      const expenseSnapshot = await getDocs(expenseQuery);

      // Check if user has any income or expense records
      if (!incomeSnapshot.empty || !expenseSnapshot.empty) {
        setHasData(true);
        setIncomeData(
          incomeSnapshot.docs.map((doc) => ({
            id: doc.id,
            amount: doc.data().amount,
            createdAt: doc.data().createdAt.toDate(),
            description: doc.data().description || "Unknown", // Ensure description is available
            source: doc.data().source || "Unknown", // Ensure source is available
          }))
        );
        setExpenseData(
          expenseSnapshot.docs.map((doc) => ({
            id: doc.id,
            color: doc.data().color || "#000000", // Default to black if not present
            title: doc.data().title || "Untitled", // Default to 'Untitled' if not present
            total: doc.data().total || 0, // Default to 0 if not present
            items: doc.data().items || [], // Ensure items is an array
          }))
        );
      } else {
        setHasData(false);
      }
    }
  };

  useEffect(() => {
    checkUserData(); // Check user data when the component mounts or user changes
  }, [user]);

  function handleGenerateReport() {
    if (!user) {
      alert("You must be logged in to request a report.");
      return;
    }

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 10;
    const contentWidth = pageWidth - 2 * margin;
    const columnWidth = contentWidth / 2;
    let leftColumnYOffset = margin;
    let rightColumnYOffset = margin;

    function addPage() {
      doc.addPage();
      leftColumnYOffset = margin;
      rightColumnYOffset = margin;
    }

    function checkPageBreak(column, height = 8) {
      const yOffset =
        column === "left" ? leftColumnYOffset : rightColumnYOffset;
      if (yOffset + height > pageHeight - margin) {
        addPage();
      }
    }

    function formatCurrency(amount) {
      return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: currency,
      }).format(amount);
    }

    // Set default font and color
    doc.setFont("helvetica");
    doc.setTextColor(50, 50, 50);

    // Header section
    function generateHeader() {
      const userName = user.displayName || "Unknown User";
      const formattedTime = new Date().toLocaleString();

      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(
        `Generated by: ${userName} | Generated on: ${formattedTime}`,
        pageWidth / 2,
        leftColumnYOffset,
        { align: "center" }
      );
      leftColumnYOffset += 10;
      rightColumnYOffset = leftColumnYOffset;

      doc.setFontSize(24);
      doc.setTextColor(0, 102, 204);
      doc.text("Income and Expense Report", pageWidth / 2, leftColumnYOffset, {
        align: "center",
      });
      leftColumnYOffset += 15;
      rightColumnYOffset = leftColumnYOffset;

      // Add a horizontal line
      doc.setDrawColor(200, 200, 200);
      doc.line(
        margin,
        leftColumnYOffset,
        pageWidth - margin,
        leftColumnYOffset
      );
      leftColumnYOffset += 10;
      rightColumnYOffset = leftColumnYOffset;
    }

    // Income section
    function generateIncomeSection() {
      let totalIncome = 0;
      doc.setFontSize(16);
      doc.setTextColor(0, 153, 0);
      doc.text("Income", margin, leftColumnYOffset);
      leftColumnYOffset += 8;

      doc.setFontSize(10);
      doc.setTextColor(50, 50, 50);
      incomeData.forEach((item) => {
        checkPageBreak("left");
        const createdAt = item.createdAt
          ? new Date(item.createdAt).toDateString()
          : "Unknown date";
        const amount = item.amount || 0;
        totalIncome += amount;
        doc.text(
          `• ${createdAt}: ${formatCurrency(amount)}`,
          margin,
          leftColumnYOffset
        );
        leftColumnYOffset += 6;
      });

      leftColumnYOffset += 10;
      checkPageBreak("left");
      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
      doc.text(
        `Total Income: ${formatCurrency(totalIncome)}`,
        margin,
        leftColumnYOffset
      );
      doc.setFont("helvetica", "normal");
      leftColumnYOffset += 15;

      return totalIncome;
    }

    // Expense breakdown section
    function generateExpenseBreakdown(totalExpenses, categoryTotals) {
      // Start from the current Y offset after the Income section
      leftColumnYOffset += 10; // Add some space before starting the breakdown

      doc.setFontSize(16);
      doc.setTextColor(0, 102, 204);
      doc.text("Expense Breakdown", margin, leftColumnYOffset);
      leftColumnYOffset += 8;

      doc.setFontSize(10);
      doc.setTextColor(50, 50, 50);

      // List each category and total in a straight list
      const entries = Object.entries(categoryTotals);
      entries.forEach(([category, total]) => {
        checkPageBreak("left");
        const percentage = ((total / totalExpenses) * 100).toFixed(2);
        const text = `• ${category}: ${formatCurrency(total)} (${percentage}%)`;
        doc.text(text, margin, leftColumnYOffset);
        leftColumnYOffset += 6;
      });

      leftColumnYOffset += 10; // Add some space after the breakdown
    }

    // Summary section
    function generateSummary(totalIncome, totalExpenses) {
      checkPageBreak("left", 25);
      doc.setFontSize(16);
      doc.setTextColor(0, 102, 204);
      doc.text("Summary", margin, leftColumnYOffset);
      leftColumnYOffset += 10;

      doc.setTextColor(50, 50, 50);
      doc.setFontSize(14);
      doc.text(
        `Total Income: ${formatCurrency(totalIncome)}`,
        margin,
        leftColumnYOffset
      );
      leftColumnYOffset += 8;
      doc.text(
        `Total Expenses: ${formatCurrency(totalExpenses)}`,
        margin,
        leftColumnYOffset
      );
      leftColumnYOffset += 8;

      const overallTotal = totalIncome - totalExpenses;
      doc.setFontSize(17);
      doc.setFont("helvetica", "bold");
      doc.text(
        `Overall Total: ${formatCurrency(overallTotal)}`,
        margin,
        leftColumnYOffset
      );
      doc.setFont("helvetica", "normal");
      leftColumnYOffset += 10;

      // Add a visual indicator (green for profit, red for loss)
      const indicatorRadius = 3;
      doc.setFillColor(
        overallTotal >= 0 ? 0 : 255,
        overallTotal >= 0 ? 255 : 0,
        0
      );
      doc.circle(margin - 4, leftColumnYOffset - 5, indicatorRadius, "F");
    }

    // Generate the report
    generateHeader();
    const totalIncome = generateIncomeSection();

    function generateExpensesSection() {
      let totalExpenses = 0;
      const categoryTotals = {};

      doc.setFontSize(16);
      doc.setTextColor(204, 0, 0);
      doc.text("Expenses", margin + columnWidth, rightColumnYOffset);
      rightColumnYOffset += 8;

      doc.setTextColor(50, 50, 50);
      expenseData.forEach((expense) => {
        checkPageBreak("right", 20);
        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.text(
          `Category: ${expense.title}`,
          margin + columnWidth,
          rightColumnYOffset
        );
        doc.setFont("helvetica", "normal");
        rightColumnYOffset += 6;

        if (Array.isArray(expense.items) && expense.items.length > 0) {
          expense.items.forEach((item) => {
            checkPageBreak("right");
            const createdAt = item.createdAt
              ? new Date(
                  item.createdAt.toMillis
                    ? item.createdAt.toMillis()
                    : item.createdAt
                ).toDateString()
              : "Unknown date";
            const amount = item.amount || 0;
            totalExpenses += amount;
            categoryTotals[expense.title] =
              (categoryTotals[expense.title] || 0) + amount;
            doc.setFontSize(10);
            doc.text(
              `• ${createdAt}: ${formatCurrency(amount)}`,
              margin + columnWidth + 5,
              rightColumnYOffset
            );
            rightColumnYOffset += 6;
          });
        } else {
          doc.setFontSize(10);
          doc.text(
            "No items found for this expense.",
            margin + columnWidth + 5,
            rightColumnYOffset
          );
          rightColumnYOffset += 6;
        }
        rightColumnYOffset += 8;
      });

      rightColumnYOffset += 10;
      checkPageBreak("right");
      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
      doc.text(
        `Total Expenses: ${formatCurrency(totalExpenses)}`,
        margin + columnWidth,
        rightColumnYOffset
      );
      doc.setFont("helvetica", "normal");
      rightColumnYOffset += 15;

      return { totalExpenses, categoryTotals };
    }

    const { totalExpenses, categoryTotals } = generateExpensesSection();
    generateExpenseBreakdown(totalExpenses, categoryTotals);
    generateSummary(totalIncome, totalExpenses);

    // Add page numbers
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text(`Page ${i} of ${pageCount}`, pageWidth - 20, pageHeight - 10);
    }

    // Save the document with the date in the filename
    const formattedDate = new Date().toISOString().split("T")[0];
    doc.save(`pennytrack_${formattedDate}.pdf`);
    toast.success("Report Downloaded");
  }

  return (
    <header className="container max-w-2xl px-6 py-6 mx-auto">
      {/* PennyTrack_Logo */}
      <div className="flex items-center justify-center py-3">
        <Image
          src="/images/favicon.png"
          alt="logo"
          width={35}
          height={35}
          className="object-cover"
        />
        <Image
          src="/images/pt.png"
          alt="logo"
          width={140}
          height={35}
          className="object-cover"
        />
      </div>
      <div className="flex items-center justify-center">
        <hr className="py-3 w-1/3"></hr>
      </div>

      <div className="flex items-center justify-between">
        {/* User Info */}
        {user && !loading && (
          <div className="flex items-center gap-2">
            <div className="h-[40px] w-[40px] rounded-full overflow-hidden">
              <img
                className="object-cover w-full h-full"
                src={user.photoURL}
                alt={user.displayName}
                referrerPolicy="no-referrer"
              />
            </div>

            <h4>
              <span className="mr-2">Hi,</span>
              <span className="font-bold sm:text-sm text-xl">
                {getFirstName(user.displayName)}
              </span>
            </h4>
          </div>
        )}
        {user && !loading && (
          <nav className="flex items-center gap-4">
            <div className="text-2xl">
              <a href="#stats">
                <MdOutlineQueryStats className="hover:scale-110 transition-all duration-200" />
              </a>
            </div>
            <div>
              <button onClick={logout} className="btn btn-danger">
                Logout
              </button>
            </div>
          </nav>
        )}
      </div>

      <div className="flex items-center justify-between mt-3">
        {/* Conditionally render the Generate Report button */}
        {user && !loading && hasData && (
          <button onClick={handleGenerateReport} className="btn btn-primary">
            Generate Report
          </button>
        )}

        {/* Currency Selection Dropdown */}

        {user && !loading && (
          <div className="mt-4 flex items-center">
            <div className="relative">
              <select
                id="currency-select"
                value={currency}
                onChange={handleCurrencyChange}
                className="block w-25 pl-3 pr-6 py-1 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white appearance-none"
              >
                {currencies.map((curr) => (
                  <option
                    key={curr.code}
                    value={curr.code}
                    className="text-gray-900 dark:text-white"
                  >
                    {curr.code}
                  </option>
                ))}
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">
                <svg
                  className="h-4 w-4"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clipRule="evenodd"
                  />
                </svg>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
}

export default Nav;
